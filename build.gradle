import groovy.json.JsonSlurper
import java.util.regex.Pattern
import java.util.regex.Matcher

task buildChangelog {
  def changesList = ""
  def newBindingList = ""
  def stringsFile = new File("./build/changelog.md")

  def pageNumber = 1

  def orgName = 'openhab'
  def openHABMilestone = '2.3'
  def legacyMilestone = '1.12.0'

  def repos = [
    [
      'name': "org.openhab.ui.habmin",
      'description': 'HABmin',
      'milestone': "${openHABMilestone}",
      'multibinding': false
    ],[
      'name': "org.openhab.ui.habpanel",
      'description': 'HABPanel',
      'milestone': "${openHABMilestone}",
      'multibinding': false
    ],[
      'name': "openhab2-addons",
      'description': '2.x Addons',
      'milestone': "${openHABMilestone}",
      'multibinding': true
    ],[
      'name': "org.openhab.binding.zigbee",
      'description': 'Zigbee',
      'milestone': "${openHABMilestone}",
      'multibinding': false
    ],[
      'name': "org.openhab.binding.zwave",
      'description': 'ZWave',
      'milestone': "${openHABMilestone}",
      'multibinding': false
    ],[
      'name': "openhab1-addons",
      'description': '1.x Addons',
      'milestone': "${legacyMilestone}",
      'multibinding': true
    ]
  ]

  repos.each { repo ->

    def repoName = repo.name
    def milestone = repo.milestone
    def repoDesc = repo.description
    def multibinding = repo.multibinding

    def firstPull = true
    if (!multibinding) firstPull = false

    def curlOutput = new ByteArrayOutputStream()
    exec {
      commandLine 'curl', "https://api.github.com/search/issues?q=repo:${orgName}/${repoName}%20is:pr%20is:merged%20milestone:%22${milestone}%22&per_page=100"
      standardOutput = curlOutput;
    }

    def jsonSlurper = new JsonSlurper()
    def searchResults = jsonSlurper.parseText(curlOutput.toString())
    def pullRequests = searchResults.items
    def sortedByType = pullRequests.sort { it.labels[0]?.name }
    def sortedByName = sortedByType.sort { it.title.toLowerCase() }
    def prevBinding = ""
    def prevType = ""
    def firstAddonPR = false

    sortedByName.each { pullRequest ->

      def pullTitle = pullRequest.title
      def pullAuthor =  pullRequest.user.login
      def pullNumber = pullRequest.number
      def pullURL = pullRequest.html_url
      def pullType = pullRequest.labels[0]?.name


      if (firstPull) {
        changesList = changesList + "\n### ${repoDesc}\n\n"
        changesList = changesList + "| Binding | Type | Issue# | Change |\n"
        changesList = changesList + "|-|-|-|-|\n"
        firstPull = false
      }

      if (pullType == null) { pullType = "Other" }

      def pullBinding = "Misc"

      Pattern pattern = Pattern.compile("\\[(.*?)\\](.*)")
      Matcher matcher = pattern.matcher(pullTitle)

      if (matcher.find()) {
        pullBinding = matcher.group(1)
        pullTitle = matcher.group(2)
      }
      if (!multibinding) pullBinding = repoDesc

      if (pullBinding.toLowerCase() != prevBinding.toLowerCase()) {
        firstAddonPR = true
        prevBinding = pullBinding
        prevType = ""
      }

      def skipPR = false
      if (pullType != prevType) {
        def formatedType = pullType
        switch(pullType) {
          case "enhancement":
            formatedType = "Enhancements"
            break
          case "bug":
            formatedType = "Bug Fixes"
            break
          case "documentation":
            skipPR = true
            break
          case "newbinding":
            skipPR = true
            newBindingList = newBindingList + " - ${pullBinding}\n"
            break
          default:
            skipPR = true
            break
        }
        if (!skipPR) {
          if (firstAddonPR) {
            changesList = changesList + "| | | | |\n"
            changesList = changesList + "| **${pullBinding}** | *${formatedType}* "
          } else {
            changesList = changesList + "| | *${formatedType}* "
          }
          prevType = pullType
          firstAddonPR=false
        }
      } else {
        changesList = changesList + "| | "
      }
      if (!skipPR) changesList = changesList + "| [#${pullNumber}](${pullURL}) | ${pullTitle} |\n"
    }
  }
  def outputText = "### New Addons\n\n"
  outputText = outputText + "The following add-ons are newly introduced with the ${openHABMilestone} release:\n\n"
  outputText = outputText + "${newBindingList}\n"

  outputText = outputText + "The following changes were done on existing addons:\n\n"
  outputText = outputText + "${changesList}"
  stringsFile.text = outputText
}