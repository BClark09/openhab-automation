import groovy.json.*
import java.util.regex.Pattern
import java.util.regex.Matcher

task buildChangelog {
  def changesList = ""
  def newBindingList = ""
  def stringsFile = new File("./build/changelog.md")

  def orgName = 'openhab'
  def openHABMilestone = '2.4'
  def legacyMilestone = '1.13.0'

  def repos = [
    [
      'name': "openhab-distro",
      'description': 'Distribution',
      'milestone': "${openHABMilestone}",
      'newCategory': true
    ],[
      'name': "openhab-core",
      'description': '2.x Core',
      'milestone': "${openHABMilestone}",
      'newCategory': true
    ],[
      'name': "openhab2-addons",
      'description': '2.x Addons',
      'milestone': "${openHABMilestone}",
      'newCategory': true
    ],[
      'name': "org.openhab.ui.habmin",
      'description': 'HABmin',
      'milestone': "${openHABMilestone}",
      'newCategory': false
    ],[
      'name': "org.openhab.ui.habpanel",
      'description': 'HABPanel',
      'milestone': "${openHABMilestone}",
      'newCategory': false
    ],[
      'name': "org.openhab.binding.zigbee",
      'description': 'Zigbee',
      'milestone': "${openHABMilestone}",
      'newCategory': false
    ],[
      'name': "org.openhab.binding.zwave",
      'description': 'ZWave',
      'milestone': "${openHABMilestone}",
      'newCategory': false
    ],[
      'name': "openhab1-addons",
      'description': '1.x Addons',
      'milestone': "${legacyMilestone}",
      'newCategory': true
    ],[
      'name': "smarthome-new",
      'description': 'Eclipse Smarthome (New Addons)',
      'milestone': '',
      'newCategory': true
    ],[
      'name': "smarthome-bug",
      'description': 'Eclipse Smarthome (Bug Fixes)',
      'milestone': '',
      'newCategory': true
    ],[
      'name': "smarthome-enhancement",
      'description': 'Eclipse Smarthome (Enhancements)',
      'milestone': '',
      'newCategory': true
    ]
  ]

  repos.each { repo ->

    def repoName = repo.name
    def milestone = repo.milestone
    def repoDesc = repo.description
    def newCategory = repo.newCategory

    if (newCategory) {
      changesList = changesList + "\n### ${repoDesc}\n\n"
        changesList = changesList + "| Binding | Type | Issue# | Change |\n"
        changesList = changesList + "|-|-|-|-|\n"
    }

    def curlURL = ""
    def milestoneString = ""
    def labelString = ""
    def fromDate = "2018-05-20"
    def toDate = "2018-12-08"
    def mergedString = "%20merged:${fromDate}..${toDate}"
    def defaultType = "enhancement"

    switch(repoName) {
      case("smarthome-new"):
        orgName       = "eclipse"
        repoName      = "smarthome"
        labelString   = "%20label:%22New%20Contribution%22"
        defaultType   = "newbinding"
      break
      case("smarthome-enhancement"):
        orgName       = "eclipse"
        repoName      = "smarthome"
        labelString   = "%20label:%22enhancement%22"
      break
      case("smarthome-bug"):
        orgName       = "eclipse"
        repoName      = "smarthome"
        labelString   = "%20label:%22bug%22"
        defaultType   = "bug"
      break
      default:
        milestoneString="%20milestone:%22${milestone}%22"
        mergedString  = "%20is:merged"
      break
    }
    def pullRequests
    def searchesLeft = 1
    def pageNumber = 1
    def pageString = ""

    while (searchesLeft > 0) {
      curlURL = "https://api.github.com/search/issues?q=repo:${orgName}/${repoName}%20is:pr${mergedString}${milestoneString}${labelString}&per_page=100${pageString}"
      print "Parsing: ${orgName}/${repoName} (Milestone ${milestone}, Page ${pageNumber}, "
      def curlOutput = new ByteArrayOutputStream()
      exec {
        commandLine 'curl', "${curlURL}"
        standardOutput = curlOutput
        errorOutput = new ByteArrayOutputStream()
      }
      exec {
        commandLine 'sleep', "10"
      }
      def jsonSlurper = new JsonSlurper()
      def searchResults = jsonSlurper.parseText(curlOutput.toString())
      pullRequests = (searchResults.items + pullRequests).findAll{ it != null }

      if (pageString == "") {
        def resultsFound = searchResults.total_count
        println "Pull Requests Found: ${resultsFound})"
        if (resultsFound > 100) {
          searchesLeft = Math.ceil(resultsFound/100)
        }
      }
      searchesLeft = searchesLeft - 1
      pageNumber = pageNumber + 1
      pageString = "&page=${pageNumber}"
    }
    def sortedByName = pullRequests.sort { it.title.toLowerCase() }
    def prevBinding = ""
    def enhancementList = ""
    def bugfixList = ""

    sortedByName.each { pullRequest ->

      def pullTitle = pullRequest.title
      def pullAuthor =  pullRequest.user.login
      def pullNumber = pullRequest.number
      def pullURL = pullRequest.html_url
      def pullType = null

      if(repoName!="smarthome") {
        pullType = pullRequest.labels[0]?.name
      }

      def pullBinding = "Misc"

      Pattern pattern = Pattern.compile("\\[(.*?)\\](.*)")
      Matcher matcher = pattern.matcher(pullTitle)

      if (matcher.find()) {
        pullBinding = matcher.group(1)
        pullTitle = matcher.group(2)
      }

      if (!(pullType == null && pullBinding == "Misc")) {
        if (pullType == null) { pullType = "${defaultType}" }
        if (!newCategory) pullBinding = repoDesc

        if (pullBinding.toLowerCase() != prevBinding.toLowerCase()) {
          def bugfixOnly = enhancementList.isEmpty()
          enhancementList.eachLine { line, count ->
            if (count == 0) {
              changesList = changesList + "| | | | |\n"
              changesList = changesList + "| **${prevBinding}** | *Enhancements* | ${line} |\n"
            }
            else changesList = changesList + "| | | ${line} |\n"
          }
          bugfixList.eachLine { line, count ->
            if (count == 0) {
              if (bugfixOnly) {
                changesList = changesList + "| | | | |\n"
                changesList = changesList + "| **${prevBinding}** | *Bug Fixes* | ${line} |\n"
            }
              else changesList = changesList + "| | *Bug Fixes* | ${line} |\n"
            }
            else changesList = changesList + "| | | ${line} |\n"
          }
          prevBinding = pullBinding
          bugfixList = ""
          enhancementList = ""
        }

        switch(pullType) {
          case "enhancement":
            enhancementList = enhancementList + "[#${pullNumber}](${pullURL}) | ${pullTitle}\n"
            break
          case "bug":
            bugfixList = bugfixList + "[#${pullNumber}](${pullURL}) | ${pullTitle}\n"
            break
          case "newbinding":
            def docsURL = "https://www.openhab.org/addons/bindings/${pullBinding}/"
            newBindingList = newBindingList + " | [**${pullBinding}**](${docsURL}) | [#${pullNumber}](${pullURL}) |\n"
            break
        }
      }
    }
    def bugfixOnly = enhancementList.isEmpty()
    enhancementList.eachLine { line, count ->
      if (count == 0) {
        changesList = changesList + "| | | | |\n"
        changesList = changesList + "| **${prevBinding}** | *Enhancements* | ${line} |\n"
      }
      else changesList = changesList + "| | | ${line} |\n"
    }
    bugfixList.eachLine { line, count ->
      if (count == 0) {
        if (bugfixOnly) {
          changesList = changesList + "| | | | |\n"
          changesList = changesList + "| **${prevBinding}** | *Bug Fixes* | ${line} |\n"
        }
        else changesList = changesList + "| | *Bug Fixes* | ${line} |\n"
      }
      else changesList = changesList + "| | | ${line} |\n"
    }
  
  }
  def outputText = "### New Addons\n\n"
  outputText = outputText + "The following add-ons are newly introduced with the ${openHABMilestone} release:\n\n"
  outputText = outputText + "| Addon | Issue# |\n"
  outputText = outputText + "|-|-|\n"
  outputText = outputText + "${newBindingList}\n"

  outputText = outputText + "The following changes were made on existing addons:\n\n"
  outputText = outputText + "${changesList}"
  stringsFile.text = outputText
}
