import groovy.json.*
import java.util.regex.Pattern
import java.util.regex.Matcher

task buildChangelog {
  def changesList = ""
  def newBindingList = ""
  def stringsFile = new File("./build/changelog.md")

  def openHABMilestone = '2.4'
  def legacyMilestone = '1.13.0'
  def eclipseFromDate = "2018-05-20"
  def eclipseToDate = "2018-12-15"
  def mergedString = "%20is:merged"


  def categories = [
    [
      'name' : '2.x Core',
      'orgName' : 'openhab',
      'milestone' : "${openHABMilestone}",
      'repos' : [
        [
          'name' : 'openhab-distro'
        ],[
          'name' : 'openhab-core'
        ]
      ]
    ],[
      'name' : '2.x Add-ons',
      'orgName' : 'openhab',
      'milestone' : "${openHABMilestone}",
      'repos' : [
        [
          'name' : 'openhab2-addons',
        ],[
          'name' : 'org.openhab.ui.habmin',
          'addonName' : 'HABmin'
        ],[
          'name' : 'org.openhab.ui.habpanel',
          'addonName' : 'HABPanel'
        ],[
          'name' : 'org.openhab.ui.habot',
          'addonName' : 'HABot'
        ],[
          'name' : 'org.openhab.binding.zigbee',
          'addonName' : 'Zigbee'
        ],[
          'name' : 'org.openhab.binding.zwave',
          'addonName' : 'ZWave'
        ]
      ]
    ],[
      'name' : '1.x Legacy Add-ons',
      'orgName' : 'openhab',
      'milestone' : "${legacyMilestone}",
      'repos' : [
        [
          'name' : 'openhab1-addons'
        ]
      ]
    ],[
      'name' : 'Eclipse Smarthome',
      'orgName' : 'eclipse',
      'milestone' : '',
      'repos': [
        [
          'name' :'smarthome',
          'label' : '%20label:%22New%20Contribution%22'
        ],[
          'name' :'smarthome',
          'label' : '%20label:%22enhancement%22'
        ],[
          'name' :'smarthome',
          'label' : '%20label:%22bug%22'
        ]
      ]      
    ]
  ]


  categories.each { category ->

    def pullRequests
    def milestone = category.milestone
    def milestoneString = ""
    if (milestone != '') {milestoneString = "%20milestone:%22${milestone}%22"}
    def orgName = category.orgName

    changesList = changesList + "\n### ${category.name}\n\n"
    changesList = changesList + "| Binding | Type | Issue# | Change |\n"
    changesList = changesList + "|-|-|-|-|\n"

    category.repos.each { repo ->

      def curlURL = ""
      def labelString = ""
      def repoName = repo.name
      def addonName = repo.addonName

      if (repoName == 'smarthome') {
        mergedString = "%20merged:${eclipseFromDate}..${eclipseToDate}"
        labelString = repo.label
      }

      def searchesLeft = 1
      def pageNumber = 1
      def pageString = ""

      while (searchesLeft > 0) {
        curlURL = "https://api.github.com/search/issues?q=repo:${orgName}/${repoName}%20is:pr${mergedString}${milestoneString}${labelString}&per_page=100${pageString}"
        print "Parsing: ${orgName}/${repoName} (Milestone ${milestone}, Page ${pageNumber}"
        def curlOutput = new ByteArrayOutputStream()
        exec {
          commandLine 'curl', "${curlURL}"
          standardOutput = curlOutput
          errorOutput = new ByteArrayOutputStream()
        }
        exec {
          commandLine 'sleep', "10"
        }
        def jsonSlurper = new JsonSlurper()
        def searchResults = jsonSlurper.parseText(curlOutput.toString())
        if (addonName) {
          searchResults.items.each{it.title = "[${addonName}] " + it.title}
        }
        pullRequests = (searchResults.items + pullRequests).findAll{ it != null }
        if (pageString == "") {
          def resultsFound = searchResults.total_count
          println ", Pull Requests Found: ${resultsFound})"
          if (resultsFound > 100) {
            searchesLeft = Math.ceil(resultsFound/100)
          }
        } else {
          println ")"
        }
        searchesLeft = searchesLeft - 1
        pageNumber = pageNumber + 1
        pageString = "&page=${pageNumber}"
      }
      
    }
    def sortedByName = pullRequests.sort { it.title.toLowerCase() }
    def prevBinding = ""
    def enhancementList = ""
    def bugfixList = ""

    sortedByName.each { pullRequest ->

      def pullTitle = pullRequest.title
      def pullAuthor =  pullRequest.user.login
      def pullNumber = pullRequest.number
      def pullURL = pullRequest.html_url
      def addonName = pullRequest.addonName
      def docsURL
      def pullType
      
      pullRequest.labels.each { label ->
        switch(label.name.toLowerCase())
        {
          case "bug":
            pullType="bug"
            break
          case "enhancement":
            pullType="enhancement"
            break
          case ~/^new.+/:
            pullType=label.name
            break
        }
      }

      def pullBinding = "Misc"

      Pattern pattern = Pattern.compile("\\[(.*?)\\](.*)")
      Matcher matcher = pattern.matcher(pullTitle)

      if (matcher.find()) {
        pullBinding = matcher.group(1)
        pullTitle = matcher.group(2)
      }

      if (pullType != null) {
        if (pullBinding.toLowerCase() != prevBinding.toLowerCase()) {
          def bugfixOnly = enhancementList.isEmpty()
          enhancementList.eachLine { line, count ->
            if (count == 0) {
              changesList = changesList + "| | | | |\n"
              changesList = changesList + "| **${prevBinding}** | *Enhancements* | ${line} |\n"
            }
            else changesList = changesList + "| | | ${line} |\n"
          }
          bugfixList.eachLine { line, count ->
            if (count == 0) {
              if (bugfixOnly) {
                changesList = changesList + "| | | | |\n"
                changesList = changesList + "| **${prevBinding}** | *Bug Fixes* | ${line} |\n"
            }
              else changesList = changesList + "| | *Bug Fixes* | ${line} |\n"
            }
            else changesList = changesList + "| | | ${line} |\n"
          }
          prevBinding = pullBinding
          bugfixList = ""
          enhancementList = ""
        }

        switch(pullType.toLowerCase()) {
          case "enhancement":
            enhancementList = enhancementList + "[#${pullNumber}](${pullURL}) | ${pullTitle}\n"
            break
          case "bug":
            bugfixList = bugfixList + "[#${pullNumber}](${pullURL}) | ${pullTitle}\n"
            break
          case ~/^new(.+)/:
            def addonTypeURL
            def addonType = Matcher.lastMatcher[0][1].trim().capitalize()
            if (addonType == "Contribution"){ addonType = "Binding" }
            if ((addonType != "Voice") && (addonType != "Persistence")) {
              addonTypeURL = (addonType + 's').toLowerCase()
            } else {
              addonTypeURL = addonType.toLowerCase()
            }
            docsURL = "https://www.openhab.org/addons/${addonTypeURL}/${pullBinding}/"
            
            def url = docsURL.toURL()
            def pullBindingName
            Pattern htmlPattern = Pattern.compile(".*<title>(.*) - .* \\| openHAB<\\/title>")
            try {
              Matcher htmlMatcher = htmlPattern.matcher(url.text)
              if (htmlMatcher.find()) {
                pullBindingName = htmlMatcher.group(1)
              } else {
                pullBindingName = pullBinding
              }
            } catch (FileNotFoundException e) {
              pullBindingName = pullBinding
            }
            
            newBindingList = newBindingList + " | [**${pullBindingName}**](${docsURL}) | ${addonType} | [#${pullNumber}](${pullURL}) |\n"
            break
        }
      }
    }
    def bugfixOnly = enhancementList.isEmpty()
    enhancementList.eachLine { line, count ->
      if (count == 0) {
        changesList = changesList + "| | | | |\n"
        changesList = changesList + "| **${prevBinding}** | *Enhancements* | ${line} |\n"
      }
      else changesList = changesList + "| | | ${line} |\n"
    }
    bugfixList.eachLine { line, count ->
      if (count == 0) {
        if (bugfixOnly) {
          changesList = changesList + "| | | | |\n"
          changesList = changesList + "| **${prevBinding}** | *Bug Fixes* | ${line} |\n"
        }
        else changesList = changesList + "| | *Bug Fixes* | ${line} |\n"
      }
      else changesList = changesList + "| | | ${line} |\n"
    }
  
  }
  def outputText = "### New Add-ons\n\n"
  outputText = outputText + "The following add-ons are newly introduced with the ${openHABMilestone} release:\n\n"
  outputText = outputText + "| Add-on | Type | Issue# |\n"
  outputText = outputText + "|-|-|-|\n"
  outputText = outputText + "${newBindingList}\n"

  outputText = outputText + "The following changes were made on existing add-ons:\n\n"
  outputText = outputText + "${changesList}"
  stringsFile.text = outputText
}
