import groovy.json.JsonSlurper
import java.util.regex.Pattern
import java.util.regex.Matcher

task buildChangelog {
  def fileContents = ""
  def stringsFile = new File("./build/changelog.md")

  def pageNumber = 1

  def orgName = 'openhab'
  def openHABMilestone = '2.2'
  def legacyMilestone = '1.11.0'

  def repos = [
    [
      'name': "org.openhab.ui.habmin",
      'description': 'HABmin',
      'milestone': "${openHABMilestone}",
      'multibinding': false
    ],[
      'name': "org.openhab.ui.habpanel",
      'description': 'HABPanel',
      'milestone': "${openHABMilestone}",
      'multibinding': false
    ],[
      'name': "org.openhab.binding.zigbee",
      'description': 'Zigbee',
      'milestone': "${openHABMilestone}",
      'multibinding': false
    ],[
      'name': "org.openhab.binding.zwave",
      'description': 'zwave',
      'milestone': "${openHABMilestone}",
      'multibinding': false
    ],[
      'name': "openhab2-addons",
      'description': '2.x Addons',
      'milestone': "${openHABMilestone}",
      'multibinding': true
    ],[
      'name': "openhab1-addons",
      'description': '1.x Addons',
      'milestone': "${legacyMilestone}",
      'multibinding': true
    ]
  ]

  repos.each { repo ->

    def repoName = repo.name
    def milestone = repo.milestone
    def repoDesc = repo.description
    def multibinding = repo.multibinding
    fileContents = fileContents + "\n### ${repoDesc}\n"

    def curlOutput = new ByteArrayOutputStream()
    exec {
      commandLine 'curl', "https://api.github.com/search/issues?q=repo:${orgName}/${repoName}%20is:pr%20is:merged%20milestone:%22${milestone}%22&per_page=100"
      standardOutput = curlOutput;
    }

    def jsonSlurper = new JsonSlurper()
    def searchResults = jsonSlurper.parseText(curlOutput.toString())
    def pullRequests = searchResults.items
    def sortedByType = pullRequests.sort { it.labels[0]?.name }
    def sortedByName = sortedByType.sort { it.title.toLowerCase() }
    def prevBinding = ""
    def prevType = ""

    sortedByName.each { pullRequest ->

      def pullTitle = pullRequest.title
      def pullAuthor =  pullRequest.user.login
      def pullNumber = pullRequest.number
      def pullURL = pullRequest.html_url
      def pullType = pullRequest.labels[0]?.name

      if (pullType == null) { pullType = "Other" }

      def pullBinding = "Misc"

      Pattern pattern = Pattern.compile("\\[(.*?)\\](.*)")
      Matcher matcher = pattern.matcher(pullTitle)

      if (matcher.find()) {
        pullBinding = matcher.group(1)
        pullTitle = matcher.group(2)
      }
      if ((multibinding) && (pullBinding != prevBinding)) {
        fileContents = fileContents + "\n#### ${pullBinding}\n"
        prevBinding = pullBinding
        prevType = ""
      }

      def skipPR = false
      if (pullType != prevType) {
        def formatedType = pullType
        switch(pullType) {
          case "enhancement":
            formatedType = "Enhancements"
            break
          case "bug":
            formatedType = "Bug Fixes"
            break
          case "documentation":
            skipPR = true
            break
          case "newbinding":
            skipPR = true
            break
        } 
        if (!skipPR) {
          fileContents = fileContents + "\n##### ${formatedType}\n\n"
          prevType = pullType
        }
      }
      if (!skipPR) fileContents = fileContents + " - [#${pullNumber}](${pullURL}) - ${pullTitle} (@${pullAuthor})\n"
    }
  }
  stringsFile.text = fileContents
}